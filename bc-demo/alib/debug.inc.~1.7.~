<?php
  /**
   * The Debug Object and then some.
   *
   * There is only ever one debug object. You will never create
   * it. When you first include alib.inc, the debug object is created
   * and placed both in $AGLOBAL['DEBUG'] and the global variable
   * $debug.
   *
   * Note that the {@link $AGLOBAL} variable stores a reference to the
   * debug object in $MGLOBAL['DEBUG']
   * @package aLib
   * @subpackage Debuggery
   */
class Debug  {
  /**
   * The level of our debuggery. 
   * zero means none. Higher numbers mean more verbose output. Most aLib
   * objects start crying for mama at debug levels of greater than ten.
   * @var int $level 0-whatever
   */
  public $level; # Our DebugLevel
  /**
   * Output type
   * @var string $output may be either 'plain' or 'pretty'. Default is pretty.
   * @see Debug::dump()
   */
  public $output; # may be "plain" or "pretty" or "template"
  public $_debugData;
  public $template; #template object reference.
  private static $one_ping_only;
  
  /**
   * Never use this.
   */
  private function __construct($debuglevel = 0, $output = "pretty"){
    global $AGLOBAL;
    ob_start();
    $this->_debugData = array();
    $this->level = $debuglevel;
    $AGLOBAL['DEBUG'] = $this;
    // set_exception_handler(array('Debug', 'exception')); //use the Debug object's exception method.
    $this->line("Debug Object Created", 1);
  }
	
  /**
   * Don't ever use this. I <i>will</i> hurt you.
   */
  public static function singleton() {
    if (!isset(self::$one_ping_only)) {
      $c = __CLASS__;
      self::$one_ping_only = new $c;
    }
    return self::$one_ping_only;
  }
  
  /**
   * This is how you enter a line into the debug log.
   * @param string $string Arbitrary string for the logging.
   * @param int $level The debug level at which this string should be logged.
   */
  function line ($string, $level) {
    if ($level <= $this->level) {
      $bt = debug_backtrace();
      $this->_debugData[] = array( 'time' => $this->_getmicrotime(),
				   'string' => $string,
				   'level' => $level,
				   'type' => 'log',
				   'line' => $bt[0]['line'],
				   'file' => $bt[0]['file']);
      $bt = array();
    }
  }


  /**
   * The way to log a variable. This is similar to var_dump, but better.
   * @param mixed $mixed The variable to log.
   * @param int $level The debug level at which this string should be logged.
   */

  function variable ($mixed, $level) {
    if ($level <= $this->level) {
      ob_start();
      var_dump($mixed);
      $string = ob_get_contents();
      ob_end_clean();
      $bt = debug_backtrace();
      $this->_debugData[] = array( 'time' => $this->_getmicrotime(),
				   'string' => $string,
				   'level' => $level,
				   'type' => 'var',
				   'line' => $bt[1]['line'],
				   'file' => $bt[1]['file']);

	
    }
  }


  /**
   * The way to log a backtrace. This is similar to debug_backtrace, but better.
   * @param int $level The debug level at which this string should be logged.
   */

  function backtrace ($level) {
    if ($level <= $this->level) {
      $bt = debug_backtrace();
      $this->_debugData[] = array( 'time' => $this->_getmicrotime(),
				   'bt' => $bt,
				   'level' => $level,
				   'type' => 'bt');
	
    }
  }

  /**
   * Catches uncaught exceptions. This is the only debug function that
   * does not take a level. In fact, you shouldn't have to call this,
   * but you can if you want to.
   */


  public static function exception(Exception $e) {
    global $AGLOBAL;
    $AGLOBAL['DEBUG']->_debugData[] = array(
					    'time' => $AGLOBAL['DEBUG']->_getmicrotime(),
					    'exception' => $e,
					    'type' => 'exception',
					    'level' => 0);
  }


  function _getmicrotime(){ 
    list($usec, $sec) = explode(" ",microtime()); 
    return ((float)$usec + (float)$sec); 
  } 
  
  /**
   * If we've logged stuff and the debug level is greater than zero,
   * we'll spew debug info when the object is destroyed.
   */
  function __destruct() {
    $this->dump();
  }
  
  /**
   * This will output the debug info based on {@link Debug::output}.
   * Running this will finish your debugging for the session. Debug
   * level will be set to zero. Really, only call this when you're
   * done debugging.
   * @param int $return [optional] if non-zero, will return html. If
   * zero, will print the results without returning html.
   * @return string $html [optional] html
   */
  function dump ($return=0) {
    if ($this->level > 0 && $return == 0) {
      if ($this->output == "plain") {
	$this->dump_plain();
      } elseif ($this->output == "pretty") {
	$this->dump_pretty();
      } elseif ($this->output == "template") {
	$this->dump_template();
      } else {
	$this->dump_pretty();
      }
    } elseif ($this->level > 0) {
      ob_start();
      $this->dump(0);
      $contents = ob_get_contents();
      ob_end_clean();
      return ($contents);
    }
    $this->level = 0;
  }

protected function dump_template () {
  // Note! If your debug display is template,
  // do not display the template yourself, since 
  // the debug dump comes after program execution.
  $template = new template($this->template);
        $string = ob_get_contents();
      ob_end_clean();
      $output = preg_replace('/<\/body>\s*<\/html>/', '', $string);
  $template->set('data', $output);
  $template->set('debugLevel', $this->level);
  $template->set('debugData', $this->_debugData);
  $template->display();
}

  protected function dump_plain () {
      $string = ob_get_contents();
      ob_end_clean();
      print $string."\n";
    print "Time\t\tDebug Level\t\tData\n";
    foreach ($this->_debugData as $datum) {
      print $datum['time'] . "\t\t" . $datum['level'] . "\t\t" . $datum['string'] . "\n";
    }
    print $this->_getmicrotime() . "\t\t1\t\tDebug Info Printed.\n";
  }

  protected function dump_pretty () {
      $string = ob_get_contents();
      ob_end_clean();
      print $string."\n";

    $row = 1;
    print "<table class=\"debugtable\" summary=\"Debug Output\">\n";
    print "<thead>\n";
    print "<caption>Debug Output</caption>\n";
    print "<tr class=\"debugheader\">\n";
    print "<th class=\"debugheader\">Time</th>\n<th class=\"debugheader\">Elapsed</th>\n<th class=\"debugheader\">Debug Level</th>\n<th>File</th><th>Line</th><th class=\"debugheader\">Data</th>";
    print "</tr>\n</thead>\n<tbody>";
    /*    $datum = array_shift($this->_debugData);
    print "<tr class=\"debugdataodd\">\n";
    print "<td class=\"debugtime\">" . date('j-m-y G:i:s T', $datum['time']) . "</td>\n";
    print "<td class=\"debugelapsed\"> -- </td>\n";
    print "<td class=\"debuglevel\">" . $datum['level'] . "</td>\n";
    print "<td class=\"debugfile\">" . $datum['file'] . "</td>\n";
    print "<td class=\"debugline\">" . $datum['line'] . "</td>\n";
    print "<td class=\"debugdata\">" . $datum['string'] . "</td>\n";
    print "</tr>\n";*/
    $last = 0;
    $start = $last;
    foreach ($this->_debugData as $datum) {
      $elapsed = $datum['time'] - $last;
      if ($start == 0) {
	$start = $datum['time'];
      }
      $row++;
      $class = ($row%2 == 0)?"even":"odd";
      print "<tr class=\"debugdata". $class ."\">\n";
      print "<td class=\"debugtime\">" . date('j-m-y G:i:s T', $datum['time']) . "</td>\n";
      print "<td class=\"debugelapsed\">" . $elapsed . "</td>\n";
      print "<td class=\"debuglevel\">" . $datum['level'] . "</td>\n";
    print "<td class=\"debugfile\">" . $datum['file'] . "</td>\n";
    print "<td class=\"debugline\">" . $datum['line'] . "</td>\n";
      if ($datum['type'] == 'log') {
	print "<td class=\"debugdata\">" . $datum['string'] . "</td>\n";
      } elseif ($datum['type'] == 'var') {
	print "<td class=\"debugvar\"><pre>" . $this->_colorSource($datum['string']) . "</pre></td>\n";
      } elseif ($datum['type'] == 'bt') {
	print "<td class=\"debugvar\"><pre>";
	var_dump($datum['bt']);
	print "</pre></td>\n";
      } elseif ($datum['type'] == "exception") {
	print "<td class=\"debugvar\"><b>Uncaught Exception:</b><br /><pre>";
	var_dump($datum['exception']);
	print "</pre></td>\n";
      }
      print "</tr>\n";
      $last = $datum['time'];
    }
    $elapsed = $last - $start;
    print "</tbody>\n<tfoot><tr class=\"debugsummary\"><td colspan=4>Total elapsed time: " . $elapsed . "</td></tr></tfoot>\n";
    print "</table>\n";
  }
  

  function _colorSource ($source) {
    $colorsource = highlight_string('<?'.$source.'?>', TRUE); 
    $string2 = str_replace ("&nbsp;", " ", $colorsource);
      
      $colorsource = str_replace(array("<code><span style=\"color: #000000\">\n<span style=\"color: #0000BB\">&lt;?</span>","<span style=\"color: #0000BB\">?&gt;</span>\n</span>\n</code>"),array('<code>','</code>') , $string2);
 
    return $colorsource; 
    
  }
  
}


/**
 * convenience function. Print a line of debug info inline and also log it.
 * @param string $string Arbitrary string to print.
 * @param int $debuglevel Debug level at or over which to print.
 */
function print_d ($string, $debuglevel) {
  global $AGLOBAL;
  $debug = $AGLOBAL['DEBUG'];
  if ($debuglevel <= $debug->level) {
    $debug->line($string, $debuglevel);
    if ($debug->output == "plain") {
      print "$debuglevel: $string\n";
    } elseif ($debug->output == "pretty") {
      print "<span class=\"debuginline$debuglevel\">$debuglevel: $string</span><br>\n";
    }
  }
}

/**
 * convenience function. Print a mixed variable inline and also log it.
 * @param mixed $mixed Variable to print.
 * @param int $debuglevel Debug level at or over which to print.
 */
function print_v ($mixed, $debuglevel) {
    
  global $AGLOBAL;
  $debug =& $AGLOBAL['DEBUG'];
    
  if ($debuglevel <= $debug->level) {
    $debug->variable($mixed, $debuglevel);
      if (is_object($mixed)) {
	$mixed->debug = 'Display of nested Debug object removed to avoid recursion.';
	  $resetme = 1;
	} else {
	  $resetme = 0;
	}

    ob_start();
    var_dump($mixed);
    $string = ob_get_contents();
    ob_end_clean();
    if ($resetme) {
	$mixed->debug = $debug;
      }
    if ($debug->output == "plain") {
      print "$debuglevel: $string\n";
    } elseif ($debug->output == "pretty") {
      $string2 = $debug->_colorSource($string);
      print "<span class=\"debuginline$debuglevel\">$debuglevel:<pre>\n$string2</pre></span><br>\n";
    }
  }
}

function aDebugExceptionHandler(Exception $e) {
  global $AGLOBAL;
  $AGLOBAL['DEBUG']->exception($e);
}

set_exception_handler('aDebugExceptionHandler');


?>